
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `OrderList` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model OrderList
 * 
 */
export type OrderListModel = runtime.Types.Result.DefaultSelection<Prisma.$OrderListPayload>

export type AggregateOrderList = {
  _count: OrderListCountAggregateOutputType | null
  _avg: OrderListAvgAggregateOutputType | null
  _sum: OrderListSumAggregateOutputType | null
  _min: OrderListMinAggregateOutputType | null
  _max: OrderListMaxAggregateOutputType | null
}

export type OrderListAvgAggregateOutputType = {
  id: number | null
  orderId: number | null
  productId: number | null
  costo: number | null
  quantita: number | null
}

export type OrderListSumAggregateOutputType = {
  id: number | null
  orderId: number | null
  productId: number | null
  costo: number | null
  quantita: number | null
}

export type OrderListMinAggregateOutputType = {
  id: number | null
  orderId: number | null
  productId: number | null
  costo: number | null
  quantita: number | null
}

export type OrderListMaxAggregateOutputType = {
  id: number | null
  orderId: number | null
  productId: number | null
  costo: number | null
  quantita: number | null
}

export type OrderListCountAggregateOutputType = {
  id: number
  orderId: number
  productId: number
  costo: number
  quantita: number
  _all: number
}


export type OrderListAvgAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  costo?: true
  quantita?: true
}

export type OrderListSumAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  costo?: true
  quantita?: true
}

export type OrderListMinAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  costo?: true
  quantita?: true
}

export type OrderListMaxAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  costo?: true
  quantita?: true
}

export type OrderListCountAggregateInputType = {
  id?: true
  orderId?: true
  productId?: true
  costo?: true
  quantita?: true
  _all?: true
}

export type OrderListAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderList to aggregate.
   */
  where?: Prisma.OrderListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderLists to fetch.
   */
  orderBy?: Prisma.OrderListOrderByWithRelationInput | Prisma.OrderListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.OrderListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned OrderLists
  **/
  _count?: true | OrderListCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: OrderListAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: OrderListSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: OrderListMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: OrderListMaxAggregateInputType
}

export type GetOrderListAggregateType<T extends OrderListAggregateArgs> = {
      [P in keyof T & keyof AggregateOrderList]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateOrderList[P]>
    : Prisma.GetScalarType<T[P], AggregateOrderList[P]>
}




export type OrderListGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderListWhereInput
  orderBy?: Prisma.OrderListOrderByWithAggregationInput | Prisma.OrderListOrderByWithAggregationInput[]
  by: Prisma.OrderListScalarFieldEnum[] | Prisma.OrderListScalarFieldEnum
  having?: Prisma.OrderListScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: OrderListCountAggregateInputType | true
  _avg?: OrderListAvgAggregateInputType
  _sum?: OrderListSumAggregateInputType
  _min?: OrderListMinAggregateInputType
  _max?: OrderListMaxAggregateInputType
}

export type OrderListGroupByOutputType = {
  id: number
  orderId: number
  productId: number
  costo: number
  quantita: number
  _count: OrderListCountAggregateOutputType | null
  _avg: OrderListAvgAggregateOutputType | null
  _sum: OrderListSumAggregateOutputType | null
  _min: OrderListMinAggregateOutputType | null
  _max: OrderListMaxAggregateOutputType | null
}

type GetOrderListGroupByPayload<T extends OrderListGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<OrderListGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof OrderListGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], OrderListGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], OrderListGroupByOutputType[P]>
      }
    >
  >



export type OrderListWhereInput = {
  AND?: Prisma.OrderListWhereInput | Prisma.OrderListWhereInput[]
  OR?: Prisma.OrderListWhereInput[]
  NOT?: Prisma.OrderListWhereInput | Prisma.OrderListWhereInput[]
  id?: Prisma.IntFilter<"OrderList"> | number
  orderId?: Prisma.IntFilter<"OrderList"> | number
  productId?: Prisma.IntFilter<"OrderList"> | number
  costo?: Prisma.FloatFilter<"OrderList"> | number
  quantita?: Prisma.IntFilter<"OrderList"> | number
  order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}

export type OrderListOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  costo?: Prisma.SortOrder
  quantita?: Prisma.SortOrder
  order?: Prisma.OrderOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
}

export type OrderListWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.OrderListWhereInput | Prisma.OrderListWhereInput[]
  OR?: Prisma.OrderListWhereInput[]
  NOT?: Prisma.OrderListWhereInput | Prisma.OrderListWhereInput[]
  orderId?: Prisma.IntFilter<"OrderList"> | number
  productId?: Prisma.IntFilter<"OrderList"> | number
  costo?: Prisma.FloatFilter<"OrderList"> | number
  quantita?: Prisma.IntFilter<"OrderList"> | number
  order?: Prisma.XOR<Prisma.OrderScalarRelationFilter, Prisma.OrderWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
}, "id">

export type OrderListOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  costo?: Prisma.SortOrder
  quantita?: Prisma.SortOrder
  _count?: Prisma.OrderListCountOrderByAggregateInput
  _avg?: Prisma.OrderListAvgOrderByAggregateInput
  _max?: Prisma.OrderListMaxOrderByAggregateInput
  _min?: Prisma.OrderListMinOrderByAggregateInput
  _sum?: Prisma.OrderListSumOrderByAggregateInput
}

export type OrderListScalarWhereWithAggregatesInput = {
  AND?: Prisma.OrderListScalarWhereWithAggregatesInput | Prisma.OrderListScalarWhereWithAggregatesInput[]
  OR?: Prisma.OrderListScalarWhereWithAggregatesInput[]
  NOT?: Prisma.OrderListScalarWhereWithAggregatesInput | Prisma.OrderListScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"OrderList"> | number
  orderId?: Prisma.IntWithAggregatesFilter<"OrderList"> | number
  productId?: Prisma.IntWithAggregatesFilter<"OrderList"> | number
  costo?: Prisma.FloatWithAggregatesFilter<"OrderList"> | number
  quantita?: Prisma.IntWithAggregatesFilter<"OrderList"> | number
}

export type OrderListCreateInput = {
  costo: number
  quantita: number
  order: Prisma.OrderCreateNestedOneWithoutOrderListsInput
  product: Prisma.ProductCreateNestedOneWithoutOrderListsInput
}

export type OrderListUncheckedCreateInput = {
  id?: number
  orderId: number
  productId: number
  costo: number
  quantita: number
}

export type OrderListUpdateInput = {
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.OrderUpdateOneRequiredWithoutOrderListsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutOrderListsNestedInput
}

export type OrderListUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderId?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderListCreateManyInput = {
  id?: number
  orderId: number
  productId: number
  costo: number
  quantita: number
}

export type OrderListUpdateManyMutationInput = {
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderListUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderId?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderListListRelationFilter = {
  every?: Prisma.OrderListWhereInput
  some?: Prisma.OrderListWhereInput
  none?: Prisma.OrderListWhereInput
}

export type OrderListOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type OrderListCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  costo?: Prisma.SortOrder
  quantita?: Prisma.SortOrder
}

export type OrderListAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  costo?: Prisma.SortOrder
  quantita?: Prisma.SortOrder
}

export type OrderListMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  costo?: Prisma.SortOrder
  quantita?: Prisma.SortOrder
}

export type OrderListMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  costo?: Prisma.SortOrder
  quantita?: Prisma.SortOrder
}

export type OrderListSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  orderId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  costo?: Prisma.SortOrder
  quantita?: Prisma.SortOrder
}

export type OrderListCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutProductInput, Prisma.OrderListUncheckedCreateWithoutProductInput> | Prisma.OrderListCreateWithoutProductInput[] | Prisma.OrderListUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutProductInput | Prisma.OrderListCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.OrderListCreateManyProductInputEnvelope
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
}

export type OrderListUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutProductInput, Prisma.OrderListUncheckedCreateWithoutProductInput> | Prisma.OrderListCreateWithoutProductInput[] | Prisma.OrderListUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutProductInput | Prisma.OrderListCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.OrderListCreateManyProductInputEnvelope
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
}

export type OrderListUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutProductInput, Prisma.OrderListUncheckedCreateWithoutProductInput> | Prisma.OrderListCreateWithoutProductInput[] | Prisma.OrderListUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutProductInput | Prisma.OrderListCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.OrderListUpsertWithWhereUniqueWithoutProductInput | Prisma.OrderListUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.OrderListCreateManyProductInputEnvelope
  set?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  disconnect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  delete?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  update?: Prisma.OrderListUpdateWithWhereUniqueWithoutProductInput | Prisma.OrderListUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.OrderListUpdateManyWithWhereWithoutProductInput | Prisma.OrderListUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.OrderListScalarWhereInput | Prisma.OrderListScalarWhereInput[]
}

export type OrderListUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutProductInput, Prisma.OrderListUncheckedCreateWithoutProductInput> | Prisma.OrderListCreateWithoutProductInput[] | Prisma.OrderListUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutProductInput | Prisma.OrderListCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.OrderListUpsertWithWhereUniqueWithoutProductInput | Prisma.OrderListUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.OrderListCreateManyProductInputEnvelope
  set?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  disconnect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  delete?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  update?: Prisma.OrderListUpdateWithWhereUniqueWithoutProductInput | Prisma.OrderListUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.OrderListUpdateManyWithWhereWithoutProductInput | Prisma.OrderListUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.OrderListScalarWhereInput | Prisma.OrderListScalarWhereInput[]
}

export type OrderListCreateNestedManyWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutOrderInput, Prisma.OrderListUncheckedCreateWithoutOrderInput> | Prisma.OrderListCreateWithoutOrderInput[] | Prisma.OrderListUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutOrderInput | Prisma.OrderListCreateOrConnectWithoutOrderInput[]
  createMany?: Prisma.OrderListCreateManyOrderInputEnvelope
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
}

export type OrderListUncheckedCreateNestedManyWithoutOrderInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutOrderInput, Prisma.OrderListUncheckedCreateWithoutOrderInput> | Prisma.OrderListCreateWithoutOrderInput[] | Prisma.OrderListUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutOrderInput | Prisma.OrderListCreateOrConnectWithoutOrderInput[]
  createMany?: Prisma.OrderListCreateManyOrderInputEnvelope
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
}

export type OrderListUpdateManyWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutOrderInput, Prisma.OrderListUncheckedCreateWithoutOrderInput> | Prisma.OrderListCreateWithoutOrderInput[] | Prisma.OrderListUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutOrderInput | Prisma.OrderListCreateOrConnectWithoutOrderInput[]
  upsert?: Prisma.OrderListUpsertWithWhereUniqueWithoutOrderInput | Prisma.OrderListUpsertWithWhereUniqueWithoutOrderInput[]
  createMany?: Prisma.OrderListCreateManyOrderInputEnvelope
  set?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  disconnect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  delete?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  update?: Prisma.OrderListUpdateWithWhereUniqueWithoutOrderInput | Prisma.OrderListUpdateWithWhereUniqueWithoutOrderInput[]
  updateMany?: Prisma.OrderListUpdateManyWithWhereWithoutOrderInput | Prisma.OrderListUpdateManyWithWhereWithoutOrderInput[]
  deleteMany?: Prisma.OrderListScalarWhereInput | Prisma.OrderListScalarWhereInput[]
}

export type OrderListUncheckedUpdateManyWithoutOrderNestedInput = {
  create?: Prisma.XOR<Prisma.OrderListCreateWithoutOrderInput, Prisma.OrderListUncheckedCreateWithoutOrderInput> | Prisma.OrderListCreateWithoutOrderInput[] | Prisma.OrderListUncheckedCreateWithoutOrderInput[]
  connectOrCreate?: Prisma.OrderListCreateOrConnectWithoutOrderInput | Prisma.OrderListCreateOrConnectWithoutOrderInput[]
  upsert?: Prisma.OrderListUpsertWithWhereUniqueWithoutOrderInput | Prisma.OrderListUpsertWithWhereUniqueWithoutOrderInput[]
  createMany?: Prisma.OrderListCreateManyOrderInputEnvelope
  set?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  disconnect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  delete?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  connect?: Prisma.OrderListWhereUniqueInput | Prisma.OrderListWhereUniqueInput[]
  update?: Prisma.OrderListUpdateWithWhereUniqueWithoutOrderInput | Prisma.OrderListUpdateWithWhereUniqueWithoutOrderInput[]
  updateMany?: Prisma.OrderListUpdateManyWithWhereWithoutOrderInput | Prisma.OrderListUpdateManyWithWhereWithoutOrderInput[]
  deleteMany?: Prisma.OrderListScalarWhereInput | Prisma.OrderListScalarWhereInput[]
}

export type OrderListCreateWithoutProductInput = {
  costo: number
  quantita: number
  order: Prisma.OrderCreateNestedOneWithoutOrderListsInput
}

export type OrderListUncheckedCreateWithoutProductInput = {
  id?: number
  orderId: number
  costo: number
  quantita: number
}

export type OrderListCreateOrConnectWithoutProductInput = {
  where: Prisma.OrderListWhereUniqueInput
  create: Prisma.XOR<Prisma.OrderListCreateWithoutProductInput, Prisma.OrderListUncheckedCreateWithoutProductInput>
}

export type OrderListCreateManyProductInputEnvelope = {
  data: Prisma.OrderListCreateManyProductInput | Prisma.OrderListCreateManyProductInput[]
  skipDuplicates?: boolean
}

export type OrderListUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.OrderListWhereUniqueInput
  update: Prisma.XOR<Prisma.OrderListUpdateWithoutProductInput, Prisma.OrderListUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.OrderListCreateWithoutProductInput, Prisma.OrderListUncheckedCreateWithoutProductInput>
}

export type OrderListUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.OrderListWhereUniqueInput
  data: Prisma.XOR<Prisma.OrderListUpdateWithoutProductInput, Prisma.OrderListUncheckedUpdateWithoutProductInput>
}

export type OrderListUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.OrderListScalarWhereInput
  data: Prisma.XOR<Prisma.OrderListUpdateManyMutationInput, Prisma.OrderListUncheckedUpdateManyWithoutProductInput>
}

export type OrderListScalarWhereInput = {
  AND?: Prisma.OrderListScalarWhereInput | Prisma.OrderListScalarWhereInput[]
  OR?: Prisma.OrderListScalarWhereInput[]
  NOT?: Prisma.OrderListScalarWhereInput | Prisma.OrderListScalarWhereInput[]
  id?: Prisma.IntFilter<"OrderList"> | number
  orderId?: Prisma.IntFilter<"OrderList"> | number
  productId?: Prisma.IntFilter<"OrderList"> | number
  costo?: Prisma.FloatFilter<"OrderList"> | number
  quantita?: Prisma.IntFilter<"OrderList"> | number
}

export type OrderListCreateWithoutOrderInput = {
  costo: number
  quantita: number
  product: Prisma.ProductCreateNestedOneWithoutOrderListsInput
}

export type OrderListUncheckedCreateWithoutOrderInput = {
  id?: number
  productId: number
  costo: number
  quantita: number
}

export type OrderListCreateOrConnectWithoutOrderInput = {
  where: Prisma.OrderListWhereUniqueInput
  create: Prisma.XOR<Prisma.OrderListCreateWithoutOrderInput, Prisma.OrderListUncheckedCreateWithoutOrderInput>
}

export type OrderListCreateManyOrderInputEnvelope = {
  data: Prisma.OrderListCreateManyOrderInput | Prisma.OrderListCreateManyOrderInput[]
  skipDuplicates?: boolean
}

export type OrderListUpsertWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderListWhereUniqueInput
  update: Prisma.XOR<Prisma.OrderListUpdateWithoutOrderInput, Prisma.OrderListUncheckedUpdateWithoutOrderInput>
  create: Prisma.XOR<Prisma.OrderListCreateWithoutOrderInput, Prisma.OrderListUncheckedCreateWithoutOrderInput>
}

export type OrderListUpdateWithWhereUniqueWithoutOrderInput = {
  where: Prisma.OrderListWhereUniqueInput
  data: Prisma.XOR<Prisma.OrderListUpdateWithoutOrderInput, Prisma.OrderListUncheckedUpdateWithoutOrderInput>
}

export type OrderListUpdateManyWithWhereWithoutOrderInput = {
  where: Prisma.OrderListScalarWhereInput
  data: Prisma.XOR<Prisma.OrderListUpdateManyMutationInput, Prisma.OrderListUncheckedUpdateManyWithoutOrderInput>
}

export type OrderListCreateManyProductInput = {
  id?: number
  orderId: number
  costo: number
  quantita: number
}

export type OrderListUpdateWithoutProductInput = {
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
  order?: Prisma.OrderUpdateOneRequiredWithoutOrderListsNestedInput
}

export type OrderListUncheckedUpdateWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderId?: Prisma.IntFieldUpdateOperationsInput | number
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderListUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  orderId?: Prisma.IntFieldUpdateOperationsInput | number
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderListCreateManyOrderInput = {
  id?: number
  productId: number
  costo: number
  quantita: number
}

export type OrderListUpdateWithoutOrderInput = {
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
  product?: Prisma.ProductUpdateOneRequiredWithoutOrderListsNestedInput
}

export type OrderListUncheckedUpdateWithoutOrderInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
}

export type OrderListUncheckedUpdateManyWithoutOrderInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  productId?: Prisma.IntFieldUpdateOperationsInput | number
  costo?: Prisma.FloatFieldUpdateOperationsInput | number
  quantita?: Prisma.IntFieldUpdateOperationsInput | number
}



export type OrderListSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  productId?: boolean
  costo?: boolean
  quantita?: boolean
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderList"]>

export type OrderListSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  productId?: boolean
  costo?: boolean
  quantita?: boolean
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderList"]>

export type OrderListSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  orderId?: boolean
  productId?: boolean
  costo?: boolean
  quantita?: boolean
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["orderList"]>

export type OrderListSelectScalar = {
  id?: boolean
  orderId?: boolean
  productId?: boolean
  costo?: boolean
  quantita?: boolean
}

export type OrderListOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "orderId" | "productId" | "costo" | "quantita", ExtArgs["result"]["orderList"]>
export type OrderListInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type OrderListIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type OrderListIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  order?: boolean | Prisma.OrderDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $OrderListPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "OrderList"
  objects: {
    order: Prisma.$OrderPayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    orderId: number
    productId: number
    costo: number
    quantita: number
  }, ExtArgs["result"]["orderList"]>
  composites: {}
}

export type OrderListGetPayload<S extends boolean | null | undefined | OrderListDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$OrderListPayload, S>

export type OrderListCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<OrderListFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: OrderListCountAggregateInputType | true
  }

export interface OrderListDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrderList'], meta: { name: 'OrderList' } }
  /**
   * Find zero or one OrderList that matches the filter.
   * @param {OrderListFindUniqueArgs} args - Arguments to find a OrderList
   * @example
   * // Get one OrderList
   * const orderList = await prisma.orderList.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends OrderListFindUniqueArgs>(args: Prisma.SelectSubset<T, OrderListFindUniqueArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one OrderList that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {OrderListFindUniqueOrThrowArgs} args - Arguments to find a OrderList
   * @example
   * // Get one OrderList
   * const orderList = await prisma.orderList.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends OrderListFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, OrderListFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderList that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderListFindFirstArgs} args - Arguments to find a OrderList
   * @example
   * // Get one OrderList
   * const orderList = await prisma.orderList.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends OrderListFindFirstArgs>(args?: Prisma.SelectSubset<T, OrderListFindFirstArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first OrderList that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderListFindFirstOrThrowArgs} args - Arguments to find a OrderList
   * @example
   * // Get one OrderList
   * const orderList = await prisma.orderList.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends OrderListFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, OrderListFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more OrderLists that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderListFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all OrderLists
   * const orderLists = await prisma.orderList.findMany()
   * 
   * // Get first 10 OrderLists
   * const orderLists = await prisma.orderList.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const orderListWithIdOnly = await prisma.orderList.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends OrderListFindManyArgs>(args?: Prisma.SelectSubset<T, OrderListFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a OrderList.
   * @param {OrderListCreateArgs} args - Arguments to create a OrderList.
   * @example
   * // Create one OrderList
   * const OrderList = await prisma.orderList.create({
   *   data: {
   *     // ... data to create a OrderList
   *   }
   * })
   * 
   */
  create<T extends OrderListCreateArgs>(args: Prisma.SelectSubset<T, OrderListCreateArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many OrderLists.
   * @param {OrderListCreateManyArgs} args - Arguments to create many OrderLists.
   * @example
   * // Create many OrderLists
   * const orderList = await prisma.orderList.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends OrderListCreateManyArgs>(args?: Prisma.SelectSubset<T, OrderListCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many OrderLists and returns the data saved in the database.
   * @param {OrderListCreateManyAndReturnArgs} args - Arguments to create many OrderLists.
   * @example
   * // Create many OrderLists
   * const orderList = await prisma.orderList.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many OrderLists and only return the `id`
   * const orderListWithIdOnly = await prisma.orderList.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends OrderListCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, OrderListCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a OrderList.
   * @param {OrderListDeleteArgs} args - Arguments to delete one OrderList.
   * @example
   * // Delete one OrderList
   * const OrderList = await prisma.orderList.delete({
   *   where: {
   *     // ... filter to delete one OrderList
   *   }
   * })
   * 
   */
  delete<T extends OrderListDeleteArgs>(args: Prisma.SelectSubset<T, OrderListDeleteArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one OrderList.
   * @param {OrderListUpdateArgs} args - Arguments to update one OrderList.
   * @example
   * // Update one OrderList
   * const orderList = await prisma.orderList.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends OrderListUpdateArgs>(args: Prisma.SelectSubset<T, OrderListUpdateArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more OrderLists.
   * @param {OrderListDeleteManyArgs} args - Arguments to filter OrderLists to delete.
   * @example
   * // Delete a few OrderLists
   * const { count } = await prisma.orderList.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends OrderListDeleteManyArgs>(args?: Prisma.SelectSubset<T, OrderListDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrderLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderListUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many OrderLists
   * const orderList = await prisma.orderList.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends OrderListUpdateManyArgs>(args: Prisma.SelectSubset<T, OrderListUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more OrderLists and returns the data updated in the database.
   * @param {OrderListUpdateManyAndReturnArgs} args - Arguments to update many OrderLists.
   * @example
   * // Update many OrderLists
   * const orderList = await prisma.orderList.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more OrderLists and only return the `id`
   * const orderListWithIdOnly = await prisma.orderList.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends OrderListUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, OrderListUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one OrderList.
   * @param {OrderListUpsertArgs} args - Arguments to update or create a OrderList.
   * @example
   * // Update or create a OrderList
   * const orderList = await prisma.orderList.upsert({
   *   create: {
   *     // ... data to create a OrderList
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the OrderList we want to update
   *   }
   * })
   */
  upsert<T extends OrderListUpsertArgs>(args: Prisma.SelectSubset<T, OrderListUpsertArgs<ExtArgs>>): Prisma.Prisma__OrderListClient<runtime.Types.Result.GetResult<Prisma.$OrderListPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of OrderLists.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderListCountArgs} args - Arguments to filter OrderLists to count.
   * @example
   * // Count the number of OrderLists
   * const count = await prisma.orderList.count({
   *   where: {
   *     // ... the filter for the OrderLists we want to count
   *   }
   * })
  **/
  count<T extends OrderListCountArgs>(
    args?: Prisma.Subset<T, OrderListCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], OrderListCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a OrderList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends OrderListAggregateArgs>(args: Prisma.Subset<T, OrderListAggregateArgs>): Prisma.PrismaPromise<GetOrderListAggregateType<T>>

  /**
   * Group by OrderList.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {OrderListGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends OrderListGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: OrderListGroupByArgs['orderBy'] }
      : { orderBy?: OrderListGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, OrderListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrderListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the OrderList model
 */
readonly fields: OrderListFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for OrderList.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__OrderListClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  order<T extends Prisma.OrderDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrderDefaultArgs<ExtArgs>>): Prisma.Prisma__OrderClient<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the OrderList model
 */
export interface OrderListFieldRefs {
  readonly id: Prisma.FieldRef<"OrderList", 'Int'>
  readonly orderId: Prisma.FieldRef<"OrderList", 'Int'>
  readonly productId: Prisma.FieldRef<"OrderList", 'Int'>
  readonly costo: Prisma.FieldRef<"OrderList", 'Float'>
  readonly quantita: Prisma.FieldRef<"OrderList", 'Int'>
}
    

// Custom InputTypes
/**
 * OrderList findUnique
 */
export type OrderListFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * Filter, which OrderList to fetch.
   */
  where: Prisma.OrderListWhereUniqueInput
}

/**
 * OrderList findUniqueOrThrow
 */
export type OrderListFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * Filter, which OrderList to fetch.
   */
  where: Prisma.OrderListWhereUniqueInput
}

/**
 * OrderList findFirst
 */
export type OrderListFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * Filter, which OrderList to fetch.
   */
  where?: Prisma.OrderListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderLists to fetch.
   */
  orderBy?: Prisma.OrderListOrderByWithRelationInput | Prisma.OrderListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderLists.
   */
  cursor?: Prisma.OrderListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderLists.
   */
  distinct?: Prisma.OrderListScalarFieldEnum | Prisma.OrderListScalarFieldEnum[]
}

/**
 * OrderList findFirstOrThrow
 */
export type OrderListFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * Filter, which OrderList to fetch.
   */
  where?: Prisma.OrderListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderLists to fetch.
   */
  orderBy?: Prisma.OrderListOrderByWithRelationInput | Prisma.OrderListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for OrderLists.
   */
  cursor?: Prisma.OrderListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderLists.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of OrderLists.
   */
  distinct?: Prisma.OrderListScalarFieldEnum | Prisma.OrderListScalarFieldEnum[]
}

/**
 * OrderList findMany
 */
export type OrderListFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * Filter, which OrderLists to fetch.
   */
  where?: Prisma.OrderListWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of OrderLists to fetch.
   */
  orderBy?: Prisma.OrderListOrderByWithRelationInput | Prisma.OrderListOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing OrderLists.
   */
  cursor?: Prisma.OrderListWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` OrderLists from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` OrderLists.
   */
  skip?: number
  distinct?: Prisma.OrderListScalarFieldEnum | Prisma.OrderListScalarFieldEnum[]
}

/**
 * OrderList create
 */
export type OrderListCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * The data needed to create a OrderList.
   */
  data: Prisma.XOR<Prisma.OrderListCreateInput, Prisma.OrderListUncheckedCreateInput>
}

/**
 * OrderList createMany
 */
export type OrderListCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many OrderLists.
   */
  data: Prisma.OrderListCreateManyInput | Prisma.OrderListCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * OrderList createManyAndReturn
 */
export type OrderListCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * The data used to create many OrderLists.
   */
  data: Prisma.OrderListCreateManyInput | Prisma.OrderListCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * OrderList update
 */
export type OrderListUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * The data needed to update a OrderList.
   */
  data: Prisma.XOR<Prisma.OrderListUpdateInput, Prisma.OrderListUncheckedUpdateInput>
  /**
   * Choose, which OrderList to update.
   */
  where: Prisma.OrderListWhereUniqueInput
}

/**
 * OrderList updateMany
 */
export type OrderListUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update OrderLists.
   */
  data: Prisma.XOR<Prisma.OrderListUpdateManyMutationInput, Prisma.OrderListUncheckedUpdateManyInput>
  /**
   * Filter which OrderLists to update
   */
  where?: Prisma.OrderListWhereInput
  /**
   * Limit how many OrderLists to update.
   */
  limit?: number
}

/**
 * OrderList updateManyAndReturn
 */
export type OrderListUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * The data used to update OrderLists.
   */
  data: Prisma.XOR<Prisma.OrderListUpdateManyMutationInput, Prisma.OrderListUncheckedUpdateManyInput>
  /**
   * Filter which OrderLists to update
   */
  where?: Prisma.OrderListWhereInput
  /**
   * Limit how many OrderLists to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * OrderList upsert
 */
export type OrderListUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * The filter to search for the OrderList to update in case it exists.
   */
  where: Prisma.OrderListWhereUniqueInput
  /**
   * In case the OrderList found by the `where` argument doesn't exist, create a new OrderList with this data.
   */
  create: Prisma.XOR<Prisma.OrderListCreateInput, Prisma.OrderListUncheckedCreateInput>
  /**
   * In case the OrderList was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.OrderListUpdateInput, Prisma.OrderListUncheckedUpdateInput>
}

/**
 * OrderList delete
 */
export type OrderListDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
  /**
   * Filter which OrderList to delete.
   */
  where: Prisma.OrderListWhereUniqueInput
}

/**
 * OrderList deleteMany
 */
export type OrderListDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which OrderLists to delete
   */
  where?: Prisma.OrderListWhereInput
  /**
   * Limit how many OrderLists to delete.
   */
  limit?: number
}

/**
 * OrderList without action
 */
export type OrderListDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the OrderList
   */
  select?: Prisma.OrderListSelect<ExtArgs> | null
  /**
   * Omit specific fields from the OrderList
   */
  omit?: Prisma.OrderListOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderListInclude<ExtArgs> | null
}
